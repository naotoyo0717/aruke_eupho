model User {
  id             String      @id @default(uuid())
  name           String?
  email          String?     @unique
  emailVerified  DateTime?
  image          String?
  hashedPassword String?
  createdAt      DateTime    @default(now())
  updateAt       DateTime    @updatedAt
  accounts       Account[]
  userSpots      UserSpot[]  
  reviewSpots    ReviewSpot[]
  routes         Route[]     // ユーザーが作成したルート
}

model Account {
  id                  String    @id @default(uuid())
  userId              String
  type                String
  provider            String
  providerAccountId   String
  refresh_token       String?
  access_token        String?
  expires_at          Int?
  token_type          String?
  scope               String?
  id_token            String?
  session_state       String?
  user                User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Spot {
  id          Int         @id @default(autoincrement())
  title       String      
  pictureUrl  String  
  explanation String      
  address     String
  nearStation Int?
  standard    Boolean     @default(false)
  latitude    Float?      @default(0.0)
  longitude   Float?      @default(0.0)
  userSpots   UserSpot[]  
  reviewSpots ReviewSpot[]
  routeSpots  RouteSpot[] // ルートに含まれるスポット
}

model UserSpot {
  id        Int      @id @default(autoincrement())
  userId    String
  spotId    Int
  visited   Boolean  
  selected  Boolean  
  createdAt DateTime @default(now())

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  spot      Spot     @relation(fields: [spotId], references: [id], onDelete: Cascade)

  @@unique([userId, spotId]) 
  @@index([userId])
  @@index([spotId])
}

model ReviewSpot {
  id          Int      @id @default(autoincrement())
  title       String   @db.VarChar(30)
  content     String   @db.VarChar(600)
  userId      String
  spotId      Int
  createdAt   DateTime @default(now())

  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  spot        Spot     @relation(fields: [spotId], references: [id], onDelete: Cascade)
}

model Route {
  id          Int      @id @default(autoincrement())
  userId      String
  name        String   @db.VarChar(50) // ルート名
  description String?  @db.VarChar(255) // ルートの説明
  //isPublic    Boolean  @default(false)  // 他のユーザーに公開するかどうか
  createdAt   DateTime @default(now())

  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  routeSpots  RouteSpot[]
}

model RouteSpot {
  id        Int      @id @default(autoincrement())
  routeId   Int
  spotId    Int
  //order     Int      // ルート内での順番

  route     Route    @relation(fields: [routeId], references: [id], onDelete: Cascade)
  spot      Spot     @relation(fields: [spotId], references: [id], onDelete: Cascade)

  @@unique([routeId, spotId]) // 同じルートに同じスポットを2回入れられないようにする
  @@index([routeId])
  @@index([spotId])
}
